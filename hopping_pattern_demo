#!/usr/bin/env python

# Copyright 2016 Dominic Spill

from BT_hopping_pattern import BR_EDR

import matplotlib
#matplotlib.use('qt5agg')
import matplotlib.pyplot as plt
import matplotlib.animation as animation

HOP_HISTORY = 50
channels = []
colours = [
	'#0000cc',
	#'#ff3300',
	'#0000ff',
	'#0066ff',
	'#3399ff',
	'#66ccff'
]

def animated_barplot(count, fig, pattern, bars, waterfall):
	if len(channels) == HOP_HISTORY:
		previous_channel = channels.pop()
		waterfall[previous_channel[0]].set_color('white')
		waterfall[previous_channel[0]].set_height(0)
	channels.insert(0, pattern.next())
	for idx, timeslot in enumerate(channels):
		channel, master = timeslot
		if idx < len(colours):
			bars[channel].set_color(colours[idx])
			bars[channel].set_height(1)
		else:
			bars[channel].set_color('white')
			bars[channel].set_height(0)
		waterfall[channel].set_height(-0.1)
		waterfall[channel].set_y(-0.1 * idx)
		# Blue for master to slave
		# Red for slave to master
		if master:
			waterfall[channel].set_color('blue')
		else:
			waterfall[channel].set_color('red')
	fig.canvas.draw()

def draw_pattern(title, pattern):
	fig = plt.figure()
	fig.canvas.set_window_title(title)
	bars = plt.bar(range(79), [0]*79, width=1)
	waterfall = plt.bar(range(79), [0]*79, width=1)
	plt.title(title)
	plt.yticks([-5,0,1], ('', '', ''))
	ani = animation.FuncAnimation(fig, animated_barplot, fargs=(fig, pattern, bars, waterfall))
	plt.show()

def addr_to_mac(address):
	return "%02X:%02X:%02X:%02X:%02X:%02X" % \
		((address >> 40) & 0xFF,
		 (address >> 32) & 0xFF,
		 (address >> 24) & 0xFF,
		 (address >> 16) & 0xFF,
		 (address >> 8) & 0xFF,
		 address & 0xFF)

def bluetooth_classic_pattern(address):
	print "Performing hopping pattern pre-calculations"
	pn = BR_EDR.Piconet(address)
	print "Pre-calculations complete"
	pattern = pn.gen_hops()
	title = 'Bluetooth Hopping Pattern for ' + addr_to_mac(address)
	draw_pattern(title, pattern)

if __name__ == '__main__':
	import sys
	if len(sys.argv) < 2:
		address = 0x6587cba9
		print "Using default address of " + addr_to_mac(address)
	else:
		address = int(sys.argv[1].replace(':',''), 16)
	bluetooth_classic_pattern(address)